<!--  -->
<template>
  <view class="calendar">
    <view class="calendar-header"
          wx:if="{{showHeader}}">
      <view class="calendar-header-pre"
            @tap="preMonth"></view>
      <text class="calendar-header-date">{{formatDate}}</text>
      <view class="calendar-header-next"
            @tap="nextMonth"></view>
    </view>
    <view class="calendar-week">
      <view class="calendar-week-item"
            wx:for="{{weekArr}}"
            wx:key="{{item}}">
        {{item}}
      </view>
    </view>
    <view class="calendar-body">
      <view class="calendar-day  {{cardList[item.formatDate].lessonSchedul && item.showDate && item.formatDate != today &&'isClass'}}"
            wx:for="{{monthDate}}"
            wx:key="{{item.date}}"
            @tap="bindClickDay({{item}})">
        <view class="calendar-day-content {{item.showDate ? (cardList[item.formatDate].lessonSchedul ? (cardList[item.formatDate].card ? 'success' : 'error') : '') : ''}} {{item.formatDate == today && 'isToday'}} {{cardList[item.formatDate].started && 'isBegin'}}">
          {{ item.showDate }}
          <view class="calendar-day-begin"></view>
          <view class="calendar-day-icon"></view>
        </view>
      </view>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy'
import api from '../request/api'
import dayjs from 'dayjs'
export default class Example extends wepy.component {
  props = {
    card: {
      type: Array,
      default: []
    },
    showHeader: {
      type: Boolean,
      default: false
    }
  };
  data = {
    time: '',
    year: '',
    month: '',
    selectDay: '',
    monthDate: [],
    weekArr: ['一', '二', '三', '四', '五', '六', '日']
  };
  components = {};
  methods = {
    nextMonth () {
      this.nextMonth()
    },
    preMonth () {
      this.preMonth()
    },
    bindClickDay (item) {
      this.selectDay = item.formatDate
      this.$emit('select', item)
    }
  };
  events = {};
  watch = {};
  computed = {
    cardList () {
      let cardObj = {}
      this.card.map(function (e, item) {
        cardObj[e.day] = {
          card: e.card,
          lessonSchedul:e.lessonSchedul,
          started:e.started
        };
      });
      return cardObj
    },
    formatDate () {
      let { year, month } = this
      if (!year && !month) {
        return dayjs(new Date()).format('YYYY年MM月')
      } else {
        this.$emit('today', dayjs(new Date(year, month - 1)).format('YYYY年MM月'))
        return dayjs(new Date(year, month - 1)).format('YYYY年MM月')
      }
    },
    today () {
      return dayjs(new Date()).format('YYYY/MM/DD')
    }
  };
  init () {
    let _date = new Date()
    this.time = _date
    this.year = _date.getFullYear()
    this.month = _date.getMonth() + 1
    this.getMonthDate(this.year, this.month)
  }
  nextMonth () {
    this.month += 1
    this.getMonthDate(this.year, this.month)
  }
  preMonth () {
    this.month -= 1
    console.log(this.year, this.month)
    this.getMonthDate(this.year, this.month)
  }
  getMonthDate (year, month) {
    let ret = []
    if (!year && !month) {
      let today = new Date()
      year = today.getFullYear()
      month = today.getMonth() + 1
    }
    let firstDay = new Date(year, month - 1, 1)
    let firstDayWeekDay = firstDay.getDay()
    if (firstDayWeekDay === 0) {
      firstDayWeekDay = 7
    }

    let lastDayOfLastMonth = new Date(year, month - 1, 0)
    // eslint-disable-next-line no-unused-vars
    let lastDateOfLastMonth = lastDayOfLastMonth.getDate()

    let preMonthDayCount = firstDayWeekDay - 1

    let lastDay = new Date(year, month, 0)
    let lastDate = lastDay.getDate()
    for (var i = 0; i < lastDate + preMonthDayCount; i++) {
      var date = i + 1 - preMonthDayCount
      var showDate = date
      var thisMonth = month
      if (date <= 0) {
        thisMonth = month - 1
        showDate = ''
      } else if (date > lastDate) {
        thisMonth = month + 1
        showDate = showDate - lastDate
      }

      if (thisMonth === 0) {
        // thisMonth = 12
        ret.push({
          month: thisMonth,
          date,
          showDate,
          time: new Date(year - 1, thisMonth - 1, showDate).getTime(),
          formatDate: dayjs(new Date(year, thisMonth - 1, showDate)).format(
            'YYYY/MM/DD'
          )
        })
        console.log('c1')
      } else if (thisMonth === 13) {
        // thisMonth = 1
        ret.push({
          month: thisMonth,
          date,
          showDate,
          time: new Date(year + 1, thisMonth - 1, showDate).getTime(),
          formatDate: dayjs(new Date(year, thisMonth - 1, showDate)).format(
            'YYYY/MM/DD'
          )
        })
        console.log('c2')
      } else {
        ret.push({
          month: thisMonth,
          date,
          showDate,
          time: new Date(year, thisMonth - 1, showDate).getTime(),
          formatDate: dayjs(new Date(year, thisMonth - 1, showDate)).format(
            'YYYY/MM/DD'
          )
        })
        console.log('c3')
      }
    }
    this.monthDate = ret
    console.log(ret,111)
    this.$apply()
  }
  onLoad () {
    this.init()
    // this.getCardList()
  };
}
</script>
<style lang='scss'>
@import '../assets/style/mixin.scss';
.calendar {
  /*padding: 0 38px;*/
  font-size: 28px;
  color: rgba($color: #58422b, $alpha: 0.5);
  &-header {
    @include flex-center;
    margin-bottom: 38px;
    color: #58422b;
    &-date {
      margin: 0 54px;
    }
    &-pre,
    &-next {
      @include bg('/course/my-icon-arrow.png');
      width: 17px;
      height: 32px;
    }
    &-pre {
      transform: rotate(180deg);
    }
  }
  &-week {
    @include flex-center;
    margin-bottom: 32px;


    &-item {
      @include flex-center;
      font-size:30px;
      font-weight:bold;
      color:rgba(51,51,51,1);
      width: 96px;
      height: 40px;
    }
  }
  &-body {
    display: flex;
    justify-content: left;
    flex-wrap: wrap;
    color: #C9C9C9
  }
  &-day {
    @include flex-center;
    position: relative;
    margin-bottom: 11px;
    width: 97px;
    height: 90px;
    font-weight: 600;
    &.isClass {
      background-color: #F5F7F9;
    }

    &-content {
      &.isBegin {
        .calendar-day-begin {
          position: absolute;
          left: 0;
          top: 0;
          width: 26px;
          height: 26px;
          background: url("https://pub.file.k12.vip/2020/03/25/1242704088539078657.png") no-repeat;
          background-size: 100%;
        }
      }
      &.isToday {
        color: #333333;
        width:97px;
        height:97px;
        background:rgba(255,192,0,1);
        border-radius:50%;
        line-height: 97px;
        text-align: center;
      }
      &.success {
        color: #333333;
        .calendar-day-icon {
          position: absolute;
          right: 0;
          bottom: 0;
          width: 26px;
          height: 26px;
          background: url("https://pub.file.k12.vip/2020/03/25/1242704183523287041.png") no-repeat;
          background-size: 100%;
        }
      }
      &.error {
        color: #333333;
        .calendar-day-icon {
          position: absolute;
          right: 0;
          bottom: 0;
          width: 26px;
          height: 26px;
          background: url("https://pub.file.k12.vip/2020/03/25/1242703951678939138.png") no-repeat;
          background-size: 100%;
        }
      }
    }
  }
}
</style>
