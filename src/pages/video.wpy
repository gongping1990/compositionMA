<template>
  <view class="container video">
    <mHeader
      title=""
      bgColor="transparent"
      :showBtn.sync="showBtn"
      flag="3"
    ></mHeader>
    <view @tap="bindClickVideo">
      <video
        class="video-contorl"
        id="video"
        style="height:{{isIpx ? 'calc(100vh - 68rpx' : '100vh'}}"
        show-center-play-btn="{{false}}"
        enable-progress-gesture="{{progressEnable}}"
        loop="{{false}}"
        controls="{{controls}}"
        show-play-btn="{{false}}"
        @ended="bindended"
        @timeupdate="bindtimeupdate"
        src="{{learnData.authContentUrl}}"
      ></video>
    </view>
    <van-popup show="{{ show }}" overlay="{{true}}" position="bottom">
      <view class="video-popup">
        <view class="video-time">
          <view class="video-circle">
            <van-circle
              size="{{46}}"
              value="{{30}}"
              layer-color="#fff"
              color="#FFC001"
            >
              <view class="video-circle-text">3</view>
            </van-circle>
          </view>
        </view>
        <view class="video-content">
          <view class="video-title">
            <view class="video-audio"></view>
            <text>他想做什么他想做什么他想做什么他想做什么他想做什么</text>
          </view>
          <matching></matching>
          <!-- <recorder></recorder> -->
          <!-- <view class="choice">
            <view class="choice-item selected">
              <image class="choice-item-img" src="" />
              <view class="choice-item-tag">
                A
              </view>
            </view>
            <view class="choice-item">
              <image class="choice-item-img" src="" />
              <view class="choice-item-tag">
                A
              </view>
            </view>
            <view class="choice-item">
              <image class="choice-item-img" src="" />
              <view class="choice-item-tag">
                A
              </view>
            </view>
          </view> -->
        </view>
      </view>
    </van-popup>
    <view class="_c-dialog" wx:if="{{showDialog}}">
      <view class="_c-dialog-content">
        <view class="_c-dialog-icon"></view>
        <view class="_c-dialog-text">
          你上次已经学习到{{ progressTimeText }}是否要继续？
        </view>
        <view class="_c-dialog-footer">
          <view class="_c-dialog-btn cancle" @tap="cancle">从头开始</view>
          <view class="_c-dialog-btn confirm" @tap="confirm">继续学习</view>
        </view>
      </view>
    </view>

    <view class="_c-dialog" wx:if="{{showBack}}">
      <view class="_c-dialog-content">
        <view class="_c-dialog-icon"></view>
        <view class="_c-dialog-text">
          确定要退出上课吗？
        </view>
        <view class="_c-dialog-footer">
          <view class="_c-dialog-btn cancle" @tap="cancleBack">确认退出</view>
          <view class="_c-dialog-btn confirm" @tap="confirmBack">继续学习</view>
        </view>
      </view>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy'
import mHeader from '../components/header'
import recorder from '../components/recorder'
import matching from '../components/matching'
export default class Example extends wepy.page {
  config = {
    navigationBarTitleText: '',
    usingComponents: {
      'van-popup': '../vant/popup/index',
      'van-circle': '../vant/circle/index'
    }
  }
  data = {
    showBtn: false,
    show: false,
    showDialog: false,
    showBack: false,
    progressEnable: false,
    controls: false,
    isPlay: true,
    isEnd: false,
    isLookBack: false,
    currentTime: 0,
    choiceSeleced: '',
    dialogText: '',
    learnData: {},
    pointData: {}
  }
  components = {
    mHeader,
    recorder,
    matching
  }
  methods = {
    clickConfirm() {
      console.log(121313)
    },
    cancleBack() {
      wx.navigateBack()
    },
    cancle() {
      this.resetPoint()
    },
    confirmBack() {
      this.showBack = false
      this.videoContext.play()
    },
    confirm() {
      this.videoContext.seek(this.pointData.ctime)
      this.videoContext.play()
      this.showDialog = false
    },
    bindended() {
      this.isEnd = true
      this.endPoint()
    },
    bindtimeupdate(event) {
      let { currentTime } = event.detail
      if (this.currentTime !== parseInt(currentTime)) {
        // let data = this.courseInfo.qaMap[this.currentTime]
        this.currentTime = parseInt(currentTime)
        if (!(this.currentTime % 5)) {
          this.updatePoint()
        }
        // if (data && data.anEnum === 1) {
        //   this.questionData = data
        //   this.questionArr = data.optionList
        //   this.showDialog = false
        //   this.show = true
        //   this.isPlay = false
        //   this.time = data.answerTime
        //   this.baseTime = data.answerTime
        //   this.setRandomTime()
        //   setTimeout(() => {
        //     this.downTime()
        //   }, 1000)
        // }
        // if (data && data.anEnum === 2) {
        //   this.correctAnswer = data.answer
        //   this.setAnswerStatus()
        // }
      }
    },
    bindClickVideo() {
      this.showBtn = true
      clearTimeout(this.setTimeOut)
      this.setTimeOut = setTimeout(() => {
        this.showBtn = false
      }, 3000)
    }
  }
  events = {
    back() {
      this.videoContext.pause()
      this.showBack = true
    }
  }
  watch = {
    isPlay(n) {
      if (n) {
        this.videoContext.play()
      } else {
        console.log(1)
        this.videoContext.pause()
      }
    }
  }
  computed = {
    isIpx() {
      return this.$parent.globalData.isIpx
    },
    progressTimeText() {
      let { ctime } = this.pointData
      if (ctime) {
        let minute = 0
        let second = 0
        let time = ctime
        minute = parseInt(time / 60)
        second = time % 60
        minute = minute < 10 ? '0' + minute : minute
        second = second < 10 ? '0' + second : second
        return `${minute}分${second}秒`
      } else {
        return '00分00秒'
      }
    }
  }
  getThreeLearnInfo() {
    let { api } = this.$parent.globalData
    api.study
      .getThreeLearnInfo({
        pointId: this.pointId
      })
      .then(({ data }) => {
        this.learnData = data.resultData
        this.startPoint()
        this.$apply()
      })
  }
  startPoint() {
    let { api } = this.$parent.globalData
    api.study
      .startPoint({
        cpId: this.learnData.id,
        lessonId: this.learnData.lessonId
      })
      .then(({ data }) => {
        let { type } = this.learnData
        this.pointData = data.resultData
        if (data.resultData.resume) {
          this.showDialog = true
        } else {
          setTimeout(() => {
            this.videoContext.play()
          }, 1000)
        }
        this.$apply()
      })
  }
  resetPoint() {
    let { api } = this.$parent.globalData
    api.study
      .resetPoint({
        id: this.pointData.id
      })
      .then(({ data }) => {
        this.showDialog = false
        this.videoContext.seek(0)
        this.videoContext.play()
        this.$apply()
      })
  }
  updatePoint() {
    let { api } = this.$parent.globalData
    api.study.updatePoint({
      ctime: this.currentTime,
      id: this.pointData.id
    })
  }
  endPoint() {
    let { api } = this.$parent.globalData
    api.study
      .endPoint({
        id: this.pointData.id
      })
      .then(({ data }) => {
        wx.redirectTo({ url: '/pages/result?id=' + this.pointId })
      })
  }

  onLoad(option) {
    this.pointId = option.id
    this.videoContext = wx.createVideoContext('video')
  }
  onShow() {
    this.getThreeLearnInfo()
  }
}
</script>
<style lang="scss">
@import '../assets/style/mixin.scss';

@mixin tag($path) {
  @include bg($path);
  content: '';
  left: 4px;
  top: 4px;
  position: absolute;
  width: 68px;
  height: 68px;
  z-index: 10;
}

.video {
  &-contorl {
    width: 100vw;
    height: 100vh;
  }
  &-content {
    padding: 144px 80px 60px;
  }
  &-title {
    display: flex;
    align-items: center;
    margin-bottom: 50px;
    text {
      max-width: 502px;
      font-size: 34px;
      color: #fff;
      line-height: 46px;
    }
  }
  &-audio {
    @include bg('/1.8/video/sp_icon.png');
    margin-right: 24px;
    width: 64px;
    height: 64px;
  }
  &-popup {
    position: relative;
    width: 750px;
    background: rgba(162, 173, 255, 1);
    border-radius: 48px 48px 0px 0px;
  }
  &-time {
    position: absolute;
    left: 50%;
    top: 0;
    width: 112px;
    height: 112px;
    background: #fff;
    border-radius: 50%;
    transform: translate(-50%, -50%);
  }
  &-circle {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -45%);
    &-text {
      font-size: 48px;
      color: #ffc001;
      font-weight: bold;
    }
  }
  .choice {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    &-item {
      position: relative;
      box-sizing: border-box;
      margin-right: 62px;
      margin-bottom: 60px;
      width: 264px;
      height: 264px;
      box-shadow: 0px 6px 0px 0px rgba(134, 132, 255, 1);
      border-radius: 40px;
      border: 8px solid rgba(255, 255, 255, 1);
      &.selected {
        border-color: #ffc001;
      }
      &.error {
        border-color: #ff7c53;
        &::before {
          @include tag('/1.8/video/sp_icon_cw.png');
        }
      }
      &.success {
        border-color: #08d67d;
        &::before {
          @include tag('/1.8/video/sp_icon_zq.png');
        }
      }
      &:nth-child(2n) {
        margin-right: 0;
      }
      &-img {
        width: 264px;
        height: 264px;
      }
      &-tag {
        @include flex-center;
        position: absolute;
        left: 8px;
        top: 8px;
        width: 48px;
        height: 48px;
        border-radius: 50%;
        background: rgba(255, 255, 255, 1);
        font-size: 32px;
        color: #333;
        font-weight: bold;
      }
    }
  }
}
</style>
