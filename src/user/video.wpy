<template>
  <view class="container video">
    <mHeader
      title=""
      bgColor="transparent"
      :showBtn.sync="showBtn"
      flag="3"
    ></mHeader>
    <view @tap="bindClickVideo">
      <video
        class="video-contorl"
        id="video"
        style="height:{{isIpx ? 'calc(100vh - 68rpx' : '100vh'}}"
        show-center-play-btn="{{false}}"
        enable-progress-gesture="{{progressEnable}}"
        loop="{{false}}"
        controls="{{controls}}"
        @play="bindplay"
        @ended="bindended"
        @timeupdate="bindtimeupdate"
        src="{{learnData.authContentUrl}}"
      ></video>
    </view>
    <van-popup show="{{ show }}" overlay="{{true}}" position="bottom">
      <view class="video-popup">
        <view class="video-time">
          <view class="video-time-text">
            倒计时
          </view>
          <view class="video-time-num">{{ time }}</view>
        </view>
        <view class="video-content">
          <view class="video-title" wx:if="{{questionData.type != 9}}">
            <view
              class="video-audio {{audioPause && 'paused'}}"
              wx:if="{{questionData.authVfUrl}}"
              @tap="resetAudio"
            ></view>
            <text>{{ questionData.subject }}</text>
          </view>
          <image wx:if="{{(questionData.subjectImg || questionData.imgUrl) && questionData.type != 9}}" class="video-cover" src="{{questionData.subjectImg || questionData.imgUrl}}" />

          <!-- 录音题 start -->
          <recorder
            wx:if="{{questionData.type == 1}}"
            :questionData.sync="questionData"
            @stop.user="recorderStop"
            @start.user="recorderStart"
          />
          <!-- 录音题 end -->

          <!-- 单选题 start -->
          <view class="choice" wx:if="{{questionData.type == 2}}">
            <block wx:for="{{questionArr}}" wx:key="{{index}}">
              <view
                class="choice-item {{choiceSeleced == item.index && (item.index == questionData.answer ? 'success' : 'error') }} {{choiceSeleced == item.index && 'selected'}}"
                @tap="clickChoice({{item.index}})"
              >
                <image class="choice-item-img" src="{{item.value}}" />
                <view class="choice-item-tag">
                  {{ item.index }}
                </view>
              </view>
            </block>
          </view>
          <!-- 单选题 end -->

          <!-- 连线题 start -->
          <matching
            :questionData.sync="questionData"
            @end.user="handleAnswerEnd"
            @selected.user="matchingSelected"
            wx:if="{{questionData.type == 3}}"
          />
          <!-- 连线题 end -->

          <!-- 多选题 start -->
          <view class="choice-wrap checked" wx:if="{{questionData.type == 4}}">
            <view class="choice" >
              <block wx:for="{{checkedArr}}" wx:key="{{index}}">
                <view
                  class="choice-item {{item.selected && 'selected'}} {{checkedEnd && item.checked && item.selected && 'success'}} {{checkedEnd && !item.checked && item.selected && 'error'}}"
                  @tap="clickChecked({{item}}, {{index}})"
                >
                  <image class="choice-item-img" src="{{item.value}}" />
                  <view class="choice-item-tag">
                    {{ item.index }}
                  </view>
                </view>
              </block>
            </view>
            <view
              class="choice-btn {{checkedEnd && 'disabled'}}"
              @tap="submitChecked"
              wx:if="{{checkedArr.length}}"
            >
              确认答案
            </view>
          </view>
          <!-- 多选题 end -->

          <!-- 拖拽题 start -->
          <drag
            wx:if="{{questionData.type == 5 || questionData.type == 6}}"
            :questionData.sync="questionData"
            @selected.user="dragSelected"
            @end.user="handleAnswerEnd"
          />
          <!-- 拖拽题 end -->

          <!-- 判断题 start -->
          <view class="judge" wx:if="{{questionData.type == 7}}">
            <view class="judge-item success {{judgeActive == 1 && 'selected'}}" @tap="clickJudge({{1}})"></view>
            <view class="judge-item error {{judgeActive == 2 && 'selected'}}" @tap="clickJudge({{2}})"></view>
          </view>

          <!-- 判断题 end -->

          <!-- 单独填空 start -->
          <tianKong
            wx:if="{{questionData.type == 9}}"
            :questionData.sync="questionData"
            @resetAudio.user="resetAudio"
            @end.user="tianKongSelected"
           />
          <!-- 单独填空 end -->

          <!-- 组句题 start -->
          <sentence
            wx:if="{{questionData.type == 10}}"
            :questionData.sync="questionData"
            @end.user="tianKongSelected"
          />
          <!-- 组句题 end -->

          <!-- 段落圈选 start -->
          <section
             wx:if="{{questionData.type == 11}}"
            :questionData.sync="questionData"
            @click.user="clickPlaySound"
            @end.user="tianKongSelected"
           />
          <!-- 段落圈选 end -->

        </view>
      </view>
    </van-popup>
    <view class="_c-dialog" wx:if="{{showDialog}}">
      <view class="_c-dialog-content">
        <view class="_c-dialog-icon"></view>
        <view class="_c-dialog-text">
          你上次已经学习到{{ progressTimeText }}是否要继续？
        </view>
        <view class="_c-dialog-footer">
          <view class="_c-dialog-btn cancle" @tap="cancle">从头开始</view>
          <view class="_c-dialog-btn confirm" @tap="confirm">继续学习</view>
        </view>
      </view>
    </view>

    <view class="_c-dialog" wx:if="{{showBack}}">
      <view class="_c-dialog-content">
        <view class="_c-dialog-icon"></view>
        <view class="_c-dialog-text">
          确定要退出上课吗？
        </view>
        <view class="_c-dialog-footer">
          <view class="_c-dialog-btn cancle" @tap="cancleBack">确认退出</view>
          <view class="_c-dialog-btn confirm" @tap="confirmBack">继续学习</view>
        </view>
      </view>
    </view>
    <load wx:if="{{loading}}"></load>
    <resultAnimation
      :status.sync="anwserStatus"
    />
    <!-- <van-popup show="{{ showIcon }}" overlay="{{true}}">
      <view class="result-icon" wx:if="{{showIcon}}">
        <view class="result-icon_cs" wx:if="{{anwserStatus == 3}}"></view>
        <view class="result-icon_zq" wx:if="{{anwserStatus == 1}}"></view>
        <view class="result-icon_cw" wx:if="{{anwserStatus == 2}}"></view>
      </view>
    </van-popup> -->

    <view
      class="jh-img {{questionData.gesture == 1 ? 'js' : 'dz'}} {{showMutualImg && 'show'}}"
    />

    <view
      class="jh-icon {{questionData.gesture == 1 ? 'js' : 'dz'}}"
      wx:if="{{showMutual}}"
      @tap="clickMutual"
    />
  </view>
</template>
<script>
import wepy from 'wepy'
import mHeader from '../components/header'
import recorder from '../components/recorder'
import drag from '../components/drag'
import matching from '../components/matching'
import resultAnimation from '../components/resultAnimation'
import sentence from '../components/sentence'
import tianKong from '../components/tianKong'
import section from '../components/section'
import load from '../components/load'
let __timer = null
export default class Video extends wepy.page {
  config = {
    navigationBarTitleText: '',
    usingComponents: {
      'van-popup': '../vant/popup/index',
      'van-circle': '../vant/circle/index'
    }
  }
  data = {
    audioPause: true,
    loading: false,
    showIcon: false,
    showBtn: false,
    showMutual: false,
    showMutualImg: false,
    show: false,
    showDialog: false,
    showBack: false,
    progressEnable: false,
    controls: false,
    isPlay: true,
    isEnd: false,
    isLookBack: false,
    isReset: false,
    isFirstPlay: false,
    currentTime: 0,
    time: 0,
    baseTime: 0,
    choiceSeleced: '',
    dialogText: '',
    learnData: {},
    pointData: {},
    questionData: {},
    questionArr: [],
    matchingAnwswr: {},
    InnerAudioContext: null,
    status: 3,
    // 多选题
    checkedArr: [],
    checkedEnd: false,
    // 判断题
    judgeActive: null,
    lessonEnd: false,
    answerTime: 0
  }
  components = {
    mHeader,
    section,
    sentence,
    recorder,
    tianKong,
    drag,
    matching,
    load,
    resultAnimation
  }
  methods = {
    clickMutual() {
      this.playSound()
      if(this.showMutualImg) return
      this.showMutualImg = true
      this.playSound(6)
      setTimeout(() => {
        this.showMutualImg = false
        this.time = 0
        this.$apply()
      }, 1500);
    },
    // 答题完成
    handleAnswerEnd() {
      this.answerEnd()
    },
    clickPlaySound() {
      this.playSound()
    },
    // 填空题
    tianKongSelected(status) {
      this.playSound()
      this.answerEnd()
      this.status = status
    },
    //拖拽题
    dragSelected(status) {
      this.status = status
    },
    // 连线题
    matchingSelected(selectedObj) {
      this.matchingAnwswr = selectedObj
    },
    // 判断题
    clickJudge(index) {
      let {answerOption} = this.questionData
      this.playSound()
      this.judgeActive = index
      if(!answerOption) {
        this.status = 1
      } else {
        this.status = answerOption == index ? 1 : 2
      }

      this.answerEnd()
    },
    // 多选题
    clickChecked(item, index) {
      this.playSound()
      this.checkedArr[index].selected = !this.checkedArr[index].selected
    },
    submitChecked() {

      let {multAnswer} = this.questionData
      let status = 1
      let selectedArr = this.checkedArr.filter(e => e.selected)
      if(this.checkedEnd) return
      if(selectedArr.length < 2) {
        wx.showToast({
          title: '请至少选择两个答案！', //提示的内容,
          icon: 'none', //图标,
          mask: true, //显示透明蒙层，防止触摸穿透,
        });
        return
      }

      if(this.questionData.judgement == 1 && selectedArr.length != multAnswer.length) {
        this.status = 2
      } else {
        selectedArr.forEach(e => {
          !e.checked && (status = 2)
        })
        this.status = status
      }

      this.checkedEnd = true
      this.answerEnd()
      this.$apply()
    },
    // 单选题
    clickChoice(index) {
      this.playSound()
      this.choiceSeleced = index
      this.answerEnd()
    },
    // 录音开始
    recorderStart() {
      this.InnerAudioContext.stop()
      this.downTime()
    },
    // 录音停止
    recorderStop(res) {
      this.answerTime = this.questionData.answerTime - this.time
      clearTimeout(__timer)
      this.loading = true
      // 上传录音临时文件
      console.log(res.tempFilePath)
      wx.uploadFile({
        url: 'https://huoke.test.k12.vip/compositionv3/common/uploadPublicFile',
        filePath: res.tempFilePath,
        name: 'file',
        header: { 'Content-Type': 'multipart/form-data' },
        success: res => {
          if (res.statusCode !== 200) {
            wx.showModal({
              title: '提示',
              content: '上传失败',
              showCancel: false
            })
          } else {
            let parmas = JSON.parse(res.data)
            this.updateAnswer({
              answer: true,
              audio: parmas.resultData.url
            })
          }
        },
        fail: function(e) {
          wx.showModal({
            title: '提示',
            content: JSON.stringify(e),
            showCancel: false
          })
        }
      })
    },
    // 取消退出
    cancleBack() {
      wx.navigateBack()
    },
    // 从头开始
    cancle() {
      this.isReset = true
      this.reset()
      this.resetPoint()
    },
    // 退出当前页面
    confirmBack() {
      this.showBack = false
      this.videoContext.play()
    },
    // 继续学习
    confirm() {
      this.isReset = false
      this.reset()
      this.videoContext.seek(this.pointData.ctime - 2)
      this.videoContext.play()
      this.showDialog = false
    },
    // 点击题干小喇叭 重置音频
    resetAudio() {
      this.playSound()
      this.InnerAudioContext.stop()
      setTimeout(() => {
        this.InnerAudioContext.play()
      }, 500)
    },
    bindplay() {
      let { _sa } = this.$parent.globalData
      if (!this.isFirstPlay) {
        _sa.track('playingVideo', {
          courseID: '',
          courseTitle: '',
          classID: this.learnData.lessonId,
          className: this.learnData.lessonName,
          classType: '读写',
          playProgress: this.learnData.ctime,
          studyStage: this.isLookBack ? '回看' : '初次上课',
          playType: this.pointData.resume
            ? !this.isReset
              ? '继续观看'
              : '从头开始'
            : '初次上课',
          Source: ''
        })
        this.isFirstPlay = true
      }
    },
    // 视频播放结束
    bindended() {
      let { _sa } = this.$parent.globalData
      this.isEnd = true
      wx.redirectTo({
        url: `/pages/result?id=${this.pointId}&cid=${this.pointData.id}`
      })
      _sa.track('finishPlayingVideo', {
        courseID: '',
        courseTitle: '',
        classID: this.learnData.lessonId,
        className: this.learnData.lessonName,
        classType: '读写',
        duration: this.learnData.duration,
        isFinish: true,
        playType: this.pointData.resume
          ? !this.isReset
            ? '继续观看'
            : '从头开始'
          : '初次上课'
      })
    },
    // 视频播放中
    bindtimeupdate(event) {
      let { currentTime, duration } = event.detail
      if (this.currentTime !== parseInt(currentTime)) {
        this.currentTime = parseInt(currentTime)
        let data = this.learnData.problemMap[this.currentTime]
        // 更新关卡进度
        if (!(this.currentTime % 5)) {
          this.updatePoint()
        }

        if((currentTime / duration) > 0.85 && !this.lessonEnd) {
          this.lessonEnd = true
          this.endPoint()
        }

        // 到达答题时间点， 设置答题内容
        if (data) {
          this.questionData = data
          this.questionArr = data.optionList
          this.showDialog = false
          this.time = data.answerTime
          this.baseTime = data.answerTime
          this.videoContext.pause()

          setTimeout(() => {
            if(data.type != 8) {
              this.show = true
              this.$broadcast('init')
            } else {
              this.showMutual = true
            }
            // this.$broadcast('showQuestion')
            this.$apply()
          }, 500)
          setTimeout(() => {
            // 播放题干音频
            if (data.authVfUrl) {
              this.InnerAudioContext.src = data.authVfUrl
              this.InnerAudioContext.play()
            }

            if(data.type == 4) {
              this.checkedArr = data.optionList.map((e,i) => {
                return {
                  ...e,
                  selected: false,
                }
              })
            }

            if (data.type != 1) {
              this.downTime()
            }
            this.$apply()
          }, 1500)
        }
      }
    },
    // 点击视频显示退出按钮
    bindClickVideo() {
      this.showBtn = true
      clearTimeout(this.setTimeOut)
      this.setTimeOut = setTimeout(() => {
        this.showBtn = false
      }, 3000)
    }
  }
  events = {
    back() {
      this.videoContext.pause()
      this.showBack = true
    }
  }
  watch = {
    isPlay(n) {
      if (n) {
        this.videoContext.play()
      } else {
        this.videoContext.pause()
      }
    }
  }
  computed = {
    isIpx() {
      return this.$parent.globalData.isIpx
    },
    progressTimeText() {
      let { ctime } = this.pointData
      if (ctime) {
        let minute = 0
        let second = 0
        let time = ctime
        minute = parseInt(time / 60)
        second = time % 60
        minute = minute < 10 ? '0' + minute : minute
        second = second < 10 ? '0' + second : second
        return `${minute}分${second}秒`
      } else {
        return '00分00秒'
      }
    },
    timeProgress() {
      let { time, baseTime } = this
      let progress = 100 - parseInt((time / baseTime) * 100)
      if (!progress) return 0
      return progress
    },
    anwserStatus() {
      let {
        choiceSeleced,
        matchingAnwswr,
        status,
        judgeActive
      } = this
      let { id, type, answer, linkAnswerMap } = this.questionData
      if (!id) return status
      switch(type) {
        case 2:
          if (!choiceSeleced) return 3
          return choiceSeleced == answer ? 1 : 2
        case 3:
          let isRight = true
          let keys = Object.keys(matchingAnwswr)
          if (!keys.length) return 3
          for (let key in linkAnswerMap) {
            if (matchingAnwswr[key] != linkAnswerMap[key]) {
              isRight = false
            }
          }
          return isRight ? 1 : 2
      }
      return status
    }
  }
  playSound(type) {
    let { audioContext, playSound } = this.$parent.globalData
    playSound(audioContext, type || 1)
  }
  // 获取关卡内容
  getThreeLearnInfo() {
    let { api } = this.$parent.globalData
    api.study
      .getThreeLearnInfo({
        pointId: this.pointId
      })
      .then(({ data }) => {
        this.learnData = data.resultData
        this.startPoint()
        this.$apply()
      })
  }
  // 初始化进度
  startPoint() {
    let { api } = this.$parent.globalData
    api.study
      .startPoint({
        cpId: this.learnData.id,
        lessonId: this.learnData.lessonId
      })
      .then(({ data }) => {
        let { type } = this.learnData
        this.pointData = data.resultData
        if (data.resultData.resume) {
          this.showDialog = true
        } else {
          setTimeout(() => {
            this.videoContext.play()
          }, 1000)
        }
        this.$apply()
      })
  }
  // 重置进度
  resetPoint() {
    let { api } = this.$parent.globalData
    api.study
      .resetPoint({
        id: this.pointData.id
      })
      .then(({ data }) => {
        this.showDialog = false
        this.videoContext.seek(0)
        this.videoContext.play()
        this.$apply()
      })
  }
  answerEnd() {
    this.answerTime = this.questionData.answerTime - this.time
    this.time = 0
  }
  // 更新进度
  updatePoint() {
    let { api } = this.$parent.globalData
    api.study.updatePoint({
      ctime: this.currentTime,
      id: this.pointData.id
    })
  }
  endPoint() {
    let { api } = this.$parent.globalData
    api.study
      .endPoint({
        complete: false,
        id: this.pointData.id
      })
  }
  // 更新答题
  updateAnswer(parmas) {
    let { api } = this.$parent.globalData
    let _time = this.questionData.type == 1 ? 1000 : 4000
    parmas.id = this.pointData.id
    parmas.tid = this.questionData.id,
    parmas.time = this.answerTime
    api.study
      .updateAnswer(parmas)
      .then(() => {
        if (this.loading) {
          this.loading = false
        }
        if (parmas.audio) {
          this.$broadcast('recorderUploadSuccess')
        }
        setTimeout(() => {
          this.showIcon = false
          this.show = false
          this.judgeActive = null
          this.checkedArr = []
          this.status = 3
          this.checkedEnd = false
          this.choiceSeleced = ''
          this.$broadcast('reset')
          this.videoContext.play()
          this.InnerAudioContext.stop()
          this.$apply()
        }, _time)
        this.$apply()
      })
      .catch(() => {
        this.loading = false
        this.$apply()
      })
  }

  downTime() {
    let { choiceSeleced } = this
    let { type, answer } = this.questionData
    if (this.time >= 1) {
      this.time -= 1
      __timer = setTimeout(() => {
        this.downTime()
      }, 1000)
    } else {
      if(type == 8) {
        this.showMutual = false
        this.videoContext.play()
        this.InnerAudioContext.stop()
      } else {
        if (type == 1) {
          this.$broadcast('recorderStop')
        } else {
          if (type == 3) {
            this.$broadcast('matchingEnd')
          }
          this.updateAnswer({
            answer: this.anwserStatus == 1 ? true : false
          })
          this.$broadcast('startAnimate')
          this.InnerAudioContext.stop()
          this.InnerAudioContext.src =
            this.anwserStatus == 1
              ? this.learnData.rightAnswerUrl
              : this.anwserStatus == 2
              ? this.learnData.errorAnswerUrl
              : this.learnData.giveupAnswerUrl
          this.InnerAudioContext.play()
        }
      }
    }
    this.$apply()
  }

  reset() {
    this.audioPause = true
    this.show = false
    this.questionData = {}
    this.questionArr = []
    this.showIcon = false
    this.isPlay = true
    this.currentTime = 0
    this.time = 0
    this.baseTime = 0
    this.choiceSeleced = ''
    this.matchingAnwswr = {}
    this.InnerAudioContext.stop()
  }

  onLoad(option) {
    this.isLookBack = option.lookback
    this.pointId = option.id
    if (option.lookback) {
      this.controls = true
    }
    this.videoContext = wx.createVideoContext('video')
    this.InnerAudioContext = wx.createInnerAudioContext()
    this.InnerAudioContext.obeyMuteSwitch = false
    this.InnerAudioContext.onPlay(() => {
      this.audioPause = false
      this.$broadcast('tiankongPause', false)
      this.$apply()
    })
    this.InnerAudioContext.onStop(() => {
      this.audioPause = true
      this.$broadcast('tiankongPause', true)
      this.$apply()
    })
    this.InnerAudioContext.onEnded(() => {
      this.audioPause = true
      this.$broadcast('tiankongPause', true)
      this.$apply()
    })
  }
  onShow() {
    this.getThreeLearnInfo()
  }
  onHide() {
    this.InnerAudioContext.stop()
  }
  onUnload() {
    this.InnerAudioContext.destroy()
  }
}
</script>
<style lang="scss">
@import '../assets/style/mixin.scss';

@mixin tag($path) {
  @include bg($path);
  content: '';
  left: 4px;
  top: 4px;
  position: absolute;
  width: 68px;
  height: 68px;
  z-index: 10;
}

.video {
  .jh-icon {
    position: fixed;
    right: 46px;
    bottom: 200px;
    z-index: 1000;
    width: 191px;
    height: 194px;
    &.js {
      @include bg('/1.9/video/js.gif');
    }
    &.dz {
      @include bg('/1.9/video/dz.gif');
    }
  }
  .jh-img {
    position: fixed;
    visibility: hidden;
    left: 50%;
    top: 40%;
    z-index: 1000;
    width: 399px;
    height: 468px;
    transform: translate(-50%, -50%);
    transform-origin: center;
    &.js {
      @include bg('/1.9/video/js-img.png');
      &.show {
        animation: showJs 1.2s;
      }
    }
    &.dz {
      @include bg('/1.9/video/dz-img.png');
      &.show {
        animation: showDz 1.2s;
      }
    }
  }

  .result-icon {
    & > view {
      width: 602px;
      height: 420px;
      margin-bottom: 200px;
    }
    &_zq {
      @include bg('/1.8/lesson/pop_img_dt.png');
    }
    &_cw {
      @include bg('/1.8/lesson/pop_img_dc.png');
    }
    &_cs {
      @include bg('/1.8/lesson/pop_img_cs.png');
    }
  }
  &-contorl {
    width: 100vw;
    height: 100vh;
  }
  &-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 144px 24px 100px;
  }
  &-title {
    display: flex;
    align-items: center;
    align-self: flex-start;
    margin: 0 28px;
    text {
      max-width: 502px;
      font-size: 34px;
      color: #000000;
      line-height: 46px;
    }
  }
  &-cover {
    margin: 0 auto;
    margin-top: 56px;
    width: 590px;
    height: 440px;
    box-shadow: 0px 6px 0px 0px #fec001;
    border-radius: 40px;
    border: 8px solid rgba(255, 255, 255, 1);
  }
  &-audio {
    @include bg('/1.9/video/sp_icon.gif');
    margin-right: 24px;
    width: 68px;
    height: 74px;
    &.paused {
      @include bg('/1.9/video/sp_icon.png');
    }
  }
  &-popup {
    position: relative;
    width: 100vw;
    height: 100vh;
    background: #fff7e7;
    overflow-y: auto;
  }
  &-time {
    @include flex-center;
    position: fixed;
    left: 50%;
    bottom: 0;
    width: 170px;
    height: 58px;
    background: rgba(0, 0, 0, 1);
    opacity: 0.5;
    border-radius: 29px 29px 0px 0px;
    transform: translateX(-50%);
    z-index: 100;
    &-text {
      font-size: 24px;
      font-weight: 500;
      color: rgba(255, 255, 255, 1);
      line-height: 48px;
    }
    &-num {
      margin-left: 17px;
      font-size: 36px;
      font-weight: bold;
      color: rgba(255, 255, 255, 1);
      line-height: 48px;
    }
  }
  .judge {
    box-sizing: border-box;
    width: 100%;
    padding: 0 56px;
    padding-top: 96px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    &-item {
      box-sizing: border-box;
      width: 232px;
      height: 248px;
      border-radius: 50px;
      overflow: hidden;
      border: 8px solid #fff;
      &.selected {
        border-color: #FFC001;
      }
      &.success {
        @include bg('/1.9/video/judge-sucess.png');
      }
      &.error {
        @include bg('/1.9/video/judge-error.png');
      }
    }
  }
  .choice {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    padding: 0 56px;
    margin-top: 56px;
    &-wrap {
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    &-btn {
      @include flex-center;
      margin-top: 100px;
      width:600px;
      height:98px;
      background:rgba(255,192,0,1);
      border-radius:49px;
      font-size:36px;
      font-weight:bold;
      color:rgba(255,255,255,1);
      &.disabled {
        background: #C3C3C3;
      }
    }
    &-item {
      position: relative;
      box-sizing: border-box;
      margin-right: 62px;
      margin-bottom: 60px;
      width: 264px;
      height: 264px;
      box-shadow: 0px 6px 0px 0px rgba(255,192,0,0.6);
      border-radius: 40px;
      border: 8px solid rgba(255, 255, 255, 1);
      overflow: hidden;
      &.selected {
        border-color: #ffc001;
      }
      &.error {
        border-color: #ff7c53;
        &::before {
          @include tag('/1.8/video/sp_icon_cw.png');
        }
      }
      &.success {
        border-color: #08d67d;
        &::before {
          @include tag('/1.8/video/sp_icon_zq.png');
        }
      }
      &:nth-child(2n) {
        margin-right: 0;
      }
      &-img {
        width: 100%;
        height: 100%;
      }
      &-tag {
        @include flex-center;
        position: absolute;
        left: 8px;
        top: 8px;
        width: 48px;
        height: 48px;
        border-radius: 50%;
        background: rgba(255, 255, 255, 1);
        font-size: 32px;
        color: #333;
        font-weight: bold;
      }
    }
  }

  @keyframes showDz {
    0% {
      visibility: visible;
      transform: rotate(0) translate(-50%, -50%);
    }
    60% {
      visibility: visible;
      transform: rotate(-20deg) translate(-50%, -50%);
    }
    100% {
      // visibility: hidden;
      transform: rotate(0) translate(-50%, -50%);
    }
  }

  @keyframes showJs {
    0% {
      visibility: visible;
      transform: scale(1) translate(-50%, -50%);
    }
    60% {
      visibility: visible;
      transform: scale(1.2) translate(-50%, -50%);
    }
    100% {
      visibility: hidden;
      transform: rotate(0) translate(-50%, -50%);
    }
  }
}
</style>
